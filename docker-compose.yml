services:
  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9997:9997"  # Changed JMX port
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: CONTROLLER://0.0.0.0:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9091
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      JMX_PORT: 9997  # Changed to 9997
      KAFKA_JMX_OPTS: "-Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.port=9997 -Dcom.sun.management.jmxremote.rmi.port=9997"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - kafka-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "nc -z kafka 9093 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    ports:
      - "9400:9308"
    command: --kafka.server=kafka:9093
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O - http://localhost:9308/metrics || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kafka-ui:
    image: ghcr.io/kafbat/kafka-ui:main
    container_name: kafka-ui
    ports:
      - "9191:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    depends_on:
      kafka-exporter:
        condition: service_healthy
    networks:
      - kafka-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  balance-service:
    image: tram/balance-service:latest
    container_name: balance-service
    pull_policy: never
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/balance_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - SPRING_MAIN_ALLOW_BEAN_DEFINITION_OVERRIDING=true
    depends_on:
      - postgres
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  transaction-service:
    image: tram/transaction-service:latest
    container_name: transaction-service
    pull_policy: never
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/transaction_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - BALANCE_SERVICE_URL=http://balance-service:8081
      - SPRING_MAIN_ALLOW_BEAN_DEFINITION_OVERRIDING=true
      - EVENTUATE_KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - LOGGING_LEVEL_IO_EVENTUATE=DEBUG
      - LOGGING_LEVEL_COM_DIGITAL_TRAM_BALANCE=DEBUG
      - EVENTUATE_DATABASE_SCHEMA=eventuate
    depends_on:
      - postgres
      - balance-service
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=balance_db,transaction_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./create-multiple-dbs.sh:/docker-entrypoint-initdb.d/create-multiple-dbs.sh
      - ./init-sql/eventuate-schema.sql:/docker-entrypoint-initdb.d/eventuate-schema.sql
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  eventuate-cdc-service:
    image: eventuateio/eventuate-cdc-service:0.18.0.RELEASE
    container_name: eventuate-cdc-service
    depends_on:
      - postgres
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      EVENTUATE_CDC_POLLING_INTERVAL_IN_MILLISECONDS: 500
      EVENTUATE_CDC_MAX_EVENTS_PER_POLLING: 1000
      EVENTUATE_CDC_MAX_ATTEMPTS_FOR_POLLING: 100
      EVENTUATE_CDC_POLLING_RETRY_INTERVAL_IN_MILLISECONDS: 500
      EVENTUATE_CDC_TYPE: EventuateLocalPolling
      EVENTUATE_CDC_READER_1_TYPE: polling
      EVENTUATE_CDC_READER_1_DATASOURCEURL: jdbc:postgresql://postgres:5432/balance_db
      EVENTUATE_CDC_READER_1_DATASOURCEUSERNAME: postgres
      EVENTUATE_CDC_READER_1_DATASOURCEPASSWORD: postgres
      EVENTUATE_CDC_READER_1_DATASOURCEDRIVERCLASSNAME: org.postgresql.Driver
      EVENTUATE_CDC_READER_1_LEADERSHIPLOCKPATH: /eventuate/cdc/leader/balance
      EVENTUATE_CDC_READER_1_BINLOGCLIENTID: 1
      EVENTUATE_CDC_READER_1_OUTBOX_TABLE: eventuate.message
      EVENTUATE_CDC_PIPELINE_READER_NAME_1: reader1
      EVENTUATE_CDC_READER_2_TYPE: polling
      EVENTUATE_CDC_READER_2_DATASOURCEURL: jdbc:postgresql://postgres:5432/transaction_db
      EVENTUATE_CDC_READER_2_DATASOURCEUSERNAME: postgres
      EVENTUATE_CDC_READER_2_DATASOURCEPASSWORD: postgres
      EVENTUATE_CDC_READER_2_DATASOURCEDRIVERCLASSNAME: org.postgresql.Driver
      EVENTUATE_CDC_READER_2_LEADERSHIPLOCKPATH: /eventuate/cdc/leader/transaction
      EVENTUATE_CDC_READER_2_BINLOGCLIENTID: 2
      EVENTUATE_CDC_READER_2_OUTBOX_TABLE: eventuate.message
      EVENTUATE_CDC_PIPELINE_READER_NAME_2: reader2
    ports:
      - "8099:8080"
    networks:
      - kafka-net
    restart: unless-stopped

networks:
  kafka-net:
    driver: bridge

volumes:
  kafka-data:
  prometheus-data:
  postgres-data: